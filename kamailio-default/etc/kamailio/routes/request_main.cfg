# 主SIP请求路由逻辑
# - 处理所有传入的SIP请求，这是请求处理的起点
# - 注意：这与route { ... }相同
request_route {

	# pike_check_req检查源IP是否被允许
	# 如果不被允许，则认为源IP正在泛洪流量，直接退出
	if (!pike_check_req()) { 
		exit; 
	}
	# 检查htable黑名单和secfilter数据库 
	route(BLACKLIST);
	# 执行初始完整性检查
	route(REQINIT);
	# 设置消息来源方向标志
	route(SET_DIRECTION_FLAG);
	# 设置发送套接字
	route(SET_SOCKET);

	# CANCEL请求处理
	if (is_method("CANCEL")) {
		if (t_check_trans()) {
			# 调用转发路由
			route(RELAY);
		}
		exit;
	}

	# 处理重传请求
	if (!is_method("ACK")) {
		if(t_precheck_trans()) {
			t_check_trans();
			exit;
		}
		t_check_trans();
	}

	# 处理REGISTER请求
	route(HANDLE_REGISTER);

	# 移除不支持的编解码器
	route(REMOVE_CODECS_INBOUND);

	# 管理RTP媒体流
	route(SET_RTP_REQUEST);

	# 处理对话内请求
	route(WITHINDLG);

	### 仅处理初始请求(没有To标签)

	# 为形成对话的请求记录路由(如果被路由的话)
	# - 移除预加载的路由头
	remove_hf("Route");
	if (is_method("INVITE|SUBSCRIBE")) {
		record_route();
	}
	
	# 仅为INVITE请求记账
	if (is_method("INVITE")) {
		# 设置初始CDR变量
		route(SET_CDR_VARS);
		setflag(FLT_DLG); # 在acc_cdrs表中存储CDR
        setflag(FLT_ACC); # 存储事务级别信息
	}

	# 检查请求URI中是否有用户名
	if ($rU==$null) {
		# 请求URI中没有用户名
		sl_send_reply("484", "Address Incomplete");
		exit;
	}

	# 确定出站路由
	if(method=="INVITE"){

		# 路由来自外部的呼叫到核心b2bua
		if(isflagset(FLT_FROM_PUBLIC)){
			#!ifdef RTJSON_INBOUND

			xlog("L_INFO", "Attempting to lookup with RTJSON \n");
			# 处理HTTP异步请求以实现动态路由决策
			route(HANDLE_HTTP_REQUEST);
 			#!else

			# 路由到核心b2bua
			xlog("L_INFO", "Attempting to route call from  $fU to $tU  with dispatcher! \n");
			# 使用dispatcher选择目标，参数1表示dispatcher列表ID，参数4表示算法
			ds_select_dst(1, 4);
			# 设置失败路由用于故障转移
			t_on_failure("FAILED_DISPATCH");
			#!endif
		} 

		# 处理来自核心网络的请求
		if(isflagset(FLT_FROM_CORE)){
			# 检查呼叫是否来自dispatcher列表
			if(ds_is_from_list()) {
				# 检查位置信息(用户是否注册)
				if(!lookup("location")){
					xlog("L_INFO", "$tU is not registered. Checking ENUM. \n");
					# 检查ENUM记录。如果没有记录则返回404并退出
					if (!enum_query()) {
						xlog("L_INFO", "ENUM_LOOKUP | RURI does not match enum records $rU  \n");
						sl_send_reply("404", "Destination is not found"); 
						exit;
					}
					xlog("L_INFO", "ENUM_LOOKUP | ENUM record found for $rU  \n");
					# 故障转移所需
					if (!t_load_contacts()) { # 获取所有ENUM联系人
						sl_send_reply("500", "Server Internal Error - Cannot load contacts");
						exit;
					}
					if (!t_next_contacts()) { # 获取第一个联系人
						sl_send_reply("500", "Server Internal Error - Cannot load contacts");
						exit;
					}	
					t_set_fr(5000);  # 为此事务设置Invite超时时间为5秒
					# 设置失败路由管理故障转移
					t_on_failure("FAILED_SERIAL");
				} 
			} else { 
				xlog("L_INFO", "Call from within the core did nto originate from a known B2BUA. CID: $ci  \n");
			}
		}
	}
	# 调用转发路由
	route(RELAY);
	exit;
}
